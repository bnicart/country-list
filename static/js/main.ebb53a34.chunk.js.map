{"version":3,"sources":["CountryList.js","App.js","serviceWorker.js","index.js"],"names":["CountryList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","countries","query","handleSearch","bind","assertThisInitialized","e","setState","target","value","_this2","fetch","then","res","json","result","_this$state","filteredCountries","filter","country","name","toLowerCase","includes","react_default","a","createElement","className","CountryList_CountrySearch","length","map","CountryList_Country","data","key","React","Component","Country","_this3","capital","src","flag","width","height","alt","concat","CountrySearch","type","placeholder","onChange","App","CountryList_CountryList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAGqBA,qBAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,EACXC,UAAW,GACXC,MAAO,IAGTV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IARHA,4EAWNc,GACXX,KAAKY,SAAS,CAACL,MAAOI,EAAEE,OAAOC,OAAS,iDAGtB,IAAAC,EAAAf,KAClBA,KAAKY,SAAS,CAACP,WAAW,IAC1BW,MAAM,wCACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJL,EAAKH,SAAS,CACZN,UAAWc,EACXf,WAAW,uCAKR,IAAAgB,EACiCrB,KAAKI,MAArCC,EADDgB,EACChB,UAAWC,EADZe,EACYf,UAAWC,EADvBc,EACuBd,MAC1Be,EAAoB,GAKxB,OAJAA,EAAoBhB,EAAUiB,OAAO,SAACC,GACpC,OAAOA,EAAQC,KAAKC,cAAcC,SAASpB,EAAMmB,iBAG/CrB,EACKuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,8BAGLH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAACE,EAAD,CAAexB,aAAcR,KAAKQ,eAClCoB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,aAASR,EAAkBW,OAA3B,wBAEDX,EAAkBY,IAAI,SAACV,GACrB,OAAOI,EAAAC,EAAAC,cAACK,EAAD,CAASC,KAAMZ,EAASa,IAAKb,EAAQC,iBA7CjBa,IAAMC,YAuDzCC,cAEJ,SAAAA,EAAY5C,GAAO,IAAA6C,EAAA,OAAA3C,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACjBC,EAAA3C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KACDQ,MAAQ,CACXoB,QAAS,IAHMiB,mFAQjBzC,KAAKY,SAAS,CACZY,QAASxB,KAAKJ,MAAMwC,wCAIf,IACCZ,EAAYxB,KAAKI,MAAjBoB,QACR,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBACVP,EAAQC,MAEXG,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBP,EAAQkB,SAC5Cd,EAAAC,EAAAC,cAAA,OAAKa,IAAKnB,EAAQoB,KAAMC,MAAM,OAAOC,OAAO,MAAMC,IAAG,GAAAC,OAAKxB,EAAQC,KAAb,qBAvBvCa,IAAMC,WA8BtBU,mLAEF,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAOC,YAAY,oBAAoBC,SAAUpD,KAAKJ,MAAMY,uBAJpD8B,IAAMC,WC3EnBc,MARf,WACE,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwB,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.ebb53a34.chunk.js","sourcesContent":["import React from 'react';\nimport './CountryList.css';\n\nexport default class CountryList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      countries: [],\n      query: ''\n    };\n\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleSearch(e) {\n    this.setState({query: e.target.value || ''});\n  }\n\n  componentDidMount() {\n    this.setState({isLoading: true});\n    fetch('https://restcountries.eu/rest/v2/all')\n    .then(res => res.json())\n    .then(result => {\n      this.setState({\n        countries: result,\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    const { isLoading, countries, query } = this.state;\n    let filteredCountries = [];\n    filteredCountries = countries.filter((country) => {\n      return country.name.toLowerCase().includes(query.toLowerCase())\n    });\n\n    if (isLoading) {\n      return <div className=\"center\">Country list is loading...</div>\n    } else {\n      return (\n        <div className=\"country-list-container\">\n          <CountrySearch handleSearch={this.handleSearch} />\n          <p><small>{ filteredCountries.length } countries found...</small></p>\n          {\n            filteredCountries.map((country) => {\n              return <Country data={country} key={country.name} />;\n            })\n          }\n        </div>\n      );\n    }\n  }\n\n}\n\nclass Country extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      country: this.props.data\n    });\n  }\n\n  render() {\n    const { country } = this.state;\n    return (\n      <div className=\"country\">\n        <p className=\"country-name\">\n          {country.name}\n        </p>\n        <small className=\"country-capital\">{country.capital}</small>\n        <img src={country.flag} width=\"auto\" height=\"100\" alt={`${country.name}'s flag`} />\n      </div>\n    );\n  }\n}\n\n\nclass CountrySearch extends React.Component {\n  render() {\n    return (\n      <div className=\"country-search center\">\n        <input type=\"text\" placeholder=\"Search country...\" onChange={this.props.handleSearch} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport CountryList from './CountryList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CountryList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}